name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release ${{ github.ref }}
          
          ## Changes
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ### Homebrew (macOS/Linux)
          ```bash
          brew install rmz-dev/rmz/rmz
          ```
          
          ### Cargo
          ```bash
          cargo install rmz
          ```
          
          ### Manual Download
          Download the appropriate binary for your platform from the assets below.
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rmz
            asset_name: rmz-${{ github.ref_name }}-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: rmz
            asset_name: rmz-${{ github.ref_name }}-linux-x86_64-musl.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rmz
            asset_name: rmz-${{ github.ref_name }}-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rmz
            asset_name: rmz-${{ github.ref_name }}-macos-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rmz.exe
            asset_name: rmz-${{ github.ref_name }}-windows-x86_64.zip
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install musl tools (Linux)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-release-cargo-
          
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
      
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        cd ../../..
        
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        cd ../../..
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-publish-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-publish-cargo-
          
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish