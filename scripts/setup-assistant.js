#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = require("@inquirer/prompts");
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const promptSelector_js_1 = require("./lib/promptSelector.js");
const templateProcessor_js_1 = require("./lib/templateProcessor.js");
const fileManager_js_1 = require("./lib/fileManager.js");
const validator_js_1 = require("./lib/validator.js");
class SetupAssistant {
    constructor() {
        this.targetDir = '';
        this.options = this.parseCliOptions();
        const currentDir = process.cwd();
        this.sourceDir = path.basename(currentDir) === 'scripts'
            ? path.dirname(currentDir)
            : currentDir;
        this.fileManager = new fileManager_js_1.FileManager(this.sourceDir);
        this.templateProcessor = new templateProcessor_js_1.TemplateProcessor(this.sourceDir);
    }
    parseCliOptions() {
        const args = process.argv.slice(2);
        return {
            dryRun: args.includes('--dry-run'),
            skipPromptSelection: args.includes('--skip-prompt'),
            prompt: args.find((arg) => arg.startsWith('--prompt='))?.split('=')[1],
            verbose: args.includes('--verbose') || args.includes('-v'),
        };
    }
    async run() {
        try {
            console.log(chalk_1.default.blue('üöÄ Claude Code Development Starter Kit - Êñ∞Ë¶è„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê'));
            console.log(chalk_1.default.gray('Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åó„Åæ„Åô\n'));
            if (this.options.dryRun) {
                console.log(chalk_1.default.yellow('üîç DRY RUN „É¢„Éº„Éâ - „Éï„Ç°„Ç§„É´„ÅØÂ§âÊõ¥„Åï„Çå„Åæ„Åõ„Çì\n'));
            }
            const projectInfo = await this.collectProjectInfo();
            const { prompt, team } = this.options.skipPromptSelection && this.options.prompt
                ? {
                    prompt: this.options.prompt,
                    team: {
                        size: 1,
                        type: 'individual',
                        industry: 'technology',
                        complianceLevel: 'medium',
                    },
                }
                : await promptSelector_js_1.PromptSelector.selectPrompt();
            const techStack = await this.collectTechStackInfo();
            const config = {
                ...projectInfo,
                prompt,
                team,
                techStack,
                customizations: {},
            };
            await this.validateConfiguration(config);
            if (!this.options.dryRun) {
                await this.showSummaryAndConfirm(config);
            }
            await this.createNewProject(config);
            this.showCompletionMessage();
        }
        catch (error) {
            console.error(chalk_1.default.red('‚ùå „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:'), error);
            process.exit(1);
        }
    }
    async collectProjectInfo() {
        console.log(chalk_1.default.blue('\nüìù „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±\n'));
        try {
            const projectName = await (0, prompts_1.input)({
                message: '„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                validate: validator_js_1.Validator.validateProjectName,
                transformer: (input) => validator_js_1.Validator.sanitizeProjectName(input),
            });
            const description = await (0, prompts_1.input)({
                message: '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                validate: validator_js_1.Validator.validateDescription,
                transformer: (input) => validator_js_1.Validator.sanitizeDescription(input),
            });
            const repositoryUrl = await (0, prompts_1.input)({
                message: 'GitHub„É™„Éù„Ç∏„Éà„É™„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                validate: validator_js_1.Validator.validateRepositoryUrl,
                default: `https://github.com/your-username/${validator_js_1.Validator.generateSlugFromName(projectName)}`,
            });
            const targetPath = await (0, prompts_1.input)({
                message: '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê„Åô„Çã„Éë„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÁµ∂ÂØæ„Éë„Çπ„ÄÅÁõ∏ÂØæ„Éë„Çπ‰∏°ÊñπÂèØÔºâ:',
                default: `../${projectName}`,
                validate: (input) => {
                    if (!input.trim()) {
                        return '„Éë„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                    }
                    const trimmedInput = input.trim();
                    if (trimmedInput.includes('..') && !path.isAbsolute(trimmedInput)) {
                        return true;
                    }
                    return true;
                },
                transformer: (input) => {
                    const trimmedInput = input.trim();
                    if (path.isAbsolute(trimmedInput)) {
                        return `${trimmedInput} (Áµ∂ÂØæ„Éë„Çπ)`;
                    }
                    else {
                        return `${trimmedInput} (Áõ∏ÂØæ„Éë„Çπ)`;
                    }
                },
            });
            return {
                projectName,
                description,
                repositoryUrl,
                targetPath,
            };
        }
        catch (error) {
            console.error(chalk_1.default.red('ÂÖ•Âäõ„Ç®„É©„Éº:'), error);
            throw error;
        }
    }
    async collectTechStackInfo() {
        console.log(chalk_1.default.blue('\nüõ†Ô∏è  ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ\n'));
        try {
            const projectType = await (0, prompts_1.select)({
                message: '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çø„Ç§„Éó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                choices: [
                    { name: 'Web „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥', value: 'web-app' },
                    { name: 'CLI „ÉÑ„Éº„É´', value: 'cli-tool' },
                    { name: 'API „Çµ„Éº„Éê„Éº', value: 'api-server' },
                    { name: '„Åù„ÅÆ‰ªñ', value: 'other' },
                ],
            });
            let frontend = undefined;
            let cliLanguage = undefined;
            let backend = undefined;
            let database = undefined;
            if (projectType === 'web-app') {
                frontend = await (0, prompts_1.select)({
                    message: '„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                    choices: [
                        { name: 'Next.js (React)', value: 'Next.js' },
                        { name: 'React', value: 'React' },
                        { name: 'Vue.js', value: 'Vue.js' },
                        { name: 'Angular', value: 'Angular' },
                        { name: 'Svelte', value: 'Svelte' },
                        { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                    ],
                });
            }
            if (projectType === 'cli-tool') {
                cliLanguage = await (0, prompts_1.select)({
                    message: 'CLI „ÉÑ„Éº„É´„ÅÆË®ÄË™û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                    choices: [
                        { name: 'Rust', value: 'Rust' },
                        { name: 'Go', value: 'Go' },
                        { name: 'Node.js', value: 'Node.js' },
                        { name: 'Python', value: 'Python' },
                        { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                    ],
                });
            }
            if (projectType === 'web-app' || projectType === 'api-server') {
                backend = await (0, prompts_1.select)({
                    message: '„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                    choices: [
                        { name: 'Node.js + Express', value: 'Node.js + Express' },
                        { name: 'Node.js + Fastify', value: 'Node.js + Fastify' },
                        { name: 'AWS Lambda', value: 'AWS Lambda' },
                        { name: 'Python + FastAPI', value: 'Python + FastAPI' },
                        { name: 'Python + Django', value: 'Python + Django' },
                        { name: 'Rust + Axum', value: 'Rust + Axum' },
                        { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                    ],
                });
                database = await (0, prompts_1.select)({
                    message: '„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                    choices: [
                        { name: 'PostgreSQL', value: 'PostgreSQL' },
                        { name: 'MySQL', value: 'MySQL' },
                        { name: 'MongoDB', value: 'MongoDB' },
                        { name: 'DynamoDB', value: 'DynamoDB' },
                        { name: 'SQLite', value: 'SQLite' },
                        { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                    ],
                });
            }
            const infrastructure = await (0, prompts_1.select)({
                message: '„Ç§„É≥„Éï„É©„Çπ„Éà„É©„ÇØ„ÉÅ„É£„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                choices: [
                    { name: 'AWS', value: 'AWS' },
                    { name: 'Google Cloud Platform', value: 'GCP' },
                    { name: 'Microsoft Azure', value: 'Azure' },
                    { name: 'Vercel', value: 'Vercel' },
                    { name: 'Netlify', value: 'Netlify' },
                    { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                ],
            });
            const deployment = await (0, prompts_1.select)({
                message: '„Éá„Éó„É≠„Ç§ÊñπÊ≥ï„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                choices: [
                    { name: 'GitHub Actions', value: 'GitHub Actions' },
                    { name: 'GitLab CI', value: 'GitLab CI' },
                    { name: 'Jenkins', value: 'Jenkins' },
                    { name: 'Docker', value: 'Docker' },
                    { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                ],
            });
            const monitoring = await (0, prompts_1.select)({
                message: 'Áõ£Ë¶ñ„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:',
                choices: [
                    { name: 'Sentry', value: 'Sentry' },
                    { name: 'DataDog', value: 'DataDog' },
                    { name: 'New Relic', value: 'New Relic' },
                    { name: 'CloudWatch', value: 'CloudWatch' },
                    { name: '„Åù„ÅÆ‰ªñ', value: 'Other' },
                ],
            });
            return {
                projectType,
                frontend,
                cliLanguage,
                backend,
                database,
                infrastructure,
                deployment,
                monitoring,
            };
        }
        catch (error) {
            console.error(chalk_1.default.red('ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØÈÅ∏Êäû„Ç®„É©„Éº:'), error);
            throw error;
        }
    }
    async validateConfiguration(config) {
        const spinner = (0, ora_1.default)('Ë®≠ÂÆö„ÇíÊ§úË®º‰∏≠...').start();
        try {
            if (!config.projectName || !config.description || !config.repositoryUrl) {
                throw new Error('ÂøÖÈ†àÈ†ÖÁõÆ„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô');
            }
            const targetPath = path.isAbsolute(config.targetPath || '')
                ? config.targetPath
                : path.resolve(this.sourceDir, config.targetPath || `../${config.projectName}`);
            if (await fs.pathExists(targetPath)) {
                try {
                    const overwrite = await (0, prompts_1.confirm)({
                        message: `„Éá„Ç£„É¨„ÇØ„Éà„É™ "${targetPath}" „ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇ‰∏äÊõ∏„Åç„Åó„Åæ„Åô„ÅãÔºü`,
                        default: false,
                    });
                    if (!overwrite) {
                        throw new Error('„É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü');
                    }
                    await fs.remove(targetPath);
                }
                catch (error) {
                    if (error instanceof Error && error.message === '„É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü') {
                        throw error;
                    }
                    console.error(chalk_1.default.red('„Éá„Ç£„É¨„ÇØ„Éà„É™‰∏äÊõ∏„ÅçÁ¢∫Ë™ç‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:'), error);
                    throw new Error('„Éá„Ç£„É¨„ÇØ„Éà„É™‰∏äÊõ∏„ÅçÁ¢∫Ë™ç„Éó„É≠„Çª„Çπ„Åå‰∏≠Êñ≠„Åï„Çå„Åæ„Åó„Åü');
                }
            }
            spinner.succeed('Ë®≠ÂÆö„ÅØÊúâÂäπ„Åß„Åô');
        }
        catch (error) {
            spinner.fail('Ë®≠ÂÆö„ÅÆÊ§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            throw error;
        }
    }
    async showSummaryAndConfirm(config) {
        console.log(chalk_1.default.blue('\nüìã Ë®≠ÂÆö„Çµ„Éû„É™„Éº\n'));
        console.log(chalk_1.default.white('„Éó„É≠„Ç∏„Çß„ÇØ„Éà:'));
        console.log(chalk_1.default.gray(`  ÂêçÂâç: ${config.projectName}`));
        console.log(chalk_1.default.gray(`  Ë™¨Êòé: ${config.description}`));
        console.log(chalk_1.default.gray(`  „É™„Éù„Ç∏„Éà„É™: ${config.repositoryUrl}`));
        const displayTargetPath = path.isAbsolute(config.targetPath || '')
            ? config.targetPath
            : path.resolve(this.sourceDir, config.targetPath || `../${config.projectName}`);
        console.log(chalk_1.default.gray(`  ‰ΩúÊàêÂÖà: ${displayTargetPath}`));
        console.log(chalk_1.default.white('\nÈñãÁô∫„Ç¢„Éó„É≠„Éº„ÉÅ:'));
        console.log(chalk_1.default.gray(`  „Éó„É≠„É≥„Éó„Éà: ${config.prompt}`));
        console.log(chalk_1.default.gray(`  „ÉÅ„Éº„É†„Çµ„Ç§„Ç∫: ${config.team.size}`));
        console.log(chalk_1.default.gray(`  Ê•≠Áïå: ${config.team.industry}`));
        console.log(chalk_1.default.white('\nÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ:'));
        console.log(chalk_1.default.gray(`  „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ: ${config.techStack.frontend}`));
        console.log(chalk_1.default.gray(`  „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ: ${config.techStack.backend}`));
        console.log(chalk_1.default.gray(`  „Éá„Éº„Çø„Éô„Éº„Çπ: ${config.techStack.database}`));
        console.log(chalk_1.default.gray(`  „Ç§„É≥„Éï„É©: ${config.techStack.infrastructure}`));
        try {
            const confirmResult = await (0, prompts_1.confirm)({
                message: '„Åì„ÅÆË®≠ÂÆö„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÅãÔºü',
                default: true,
            });
            if (!confirmResult) {
                throw new Error('„É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü');
            }
        }
        catch (error) {
            if (error instanceof Error && error.message === '„É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü') {
                throw error;
            }
            console.error(chalk_1.default.red('Ë®≠ÂÆöÁ¢∫Ë™ç‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:'), error);
            throw new Error('Ë®≠ÂÆöÁ¢∫Ë™ç„Éó„É≠„Çª„Çπ„Åå‰∏≠Êñ≠„Åï„Çå„Åæ„Åó„Åü');
        }
    }
    async createNewProject(config) {
        const spinner = (0, ora_1.default)('Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê‰∏≠...').start();
        const targetPath = path.isAbsolute(config.targetPath || '')
            ? config.targetPath
            : path.resolve(this.sourceDir, config.targetPath || `../${config.projectName}`);
        this.targetDir = targetPath;
        try {
            await fs.ensureDir(targetPath);
            const copyItems = [
                'README.md',
                'package.json',
                'package-lock.json',
                '.gitignore',
                'CLAUDE.md',
                'CONTRIBUTING.md',
                'CUSTOMIZATION_GUIDE.md',
                'DEVELOPMENT_ROADMAP.md',
                'FEATURE_SUMMARY.md',
                'PROGRESS.md',
                'PROJECT_STRUCTURE.md',
                'docs',
                'prompts',
                'scripts',
                'infrastructure',
                '.github',
                'decisions',
            ];
            for (const item of copyItems) {
                const sourcePath = path.join(this.sourceDir, item);
                const targetItemPath = path.join(targetPath, item);
                if (await fs.pathExists(sourcePath)) {
                    await fs.copy(sourcePath, targetItemPath);
                }
            }
            await this.createProjectConfig(targetPath, config);
            await this.processTemplates(targetPath, config);
            if (config.techStack.projectType === 'cli-tool' && config.techStack.cliLanguage === 'Rust') {
                await this.processRustCliTemplate(targetPath, config);
            }
            await this.copyPromptFile(targetPath, config.prompt);
            await this.generateCursorRules(targetPath, config);
            await this.updatePackageJson(targetPath, config);
            await this.cleanupFiles(targetPath);
            spinner.succeed('Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
        }
        catch (error) {
            spinner.fail('„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            throw error;
        }
    }
    async createProjectConfig(targetPath, config) {
        const configDir = path.join(targetPath, '.claude');
        const configPath = path.join(configDir, 'project-config.json');
        await fs.ensureDir(configDir);
        await fs.writeFile(configPath, JSON.stringify(config, null, 2));
    }
    async processTemplates(targetPath, config) {
        const templateProcessor = new templateProcessor_js_1.TemplateProcessor(targetPath);
        await templateProcessor.processAllTemplates(config);
    }
    async copyPromptFile(targetPath, promptType) {
        const sourceFile = path.join(this.sourceDir, 'prompts', `${promptType}.md`);
        const targetFile = path.join(targetPath, 'PROMPT.md');
        if (await fs.pathExists(sourceFile)) {
            await fs.copy(sourceFile, targetFile);
        }
    }
    async processRustCliTemplate(targetPath, config) {
        const rustTemplateDir = path.join(this.sourceDir, 'templates', 'rust-cli');
        if (!(await fs.pathExists(rustTemplateDir))) {
            console.warn('Rust CLI template directory not found, skipping...');
            return;
        }
        await this.copyRustCliTemplate(rustTemplateDir, targetPath, config);
    }
    async copyRustCliTemplate(templateDir, targetPath, config) {
        const templateFiles = await this.getAllTemplateFiles(templateDir);
        for (const templateFile of templateFiles) {
            const relativePath = path.relative(templateDir, templateFile);
            const targetFile = path.join(targetPath, relativePath.replace('.template', ''));
            await fs.ensureDir(path.dirname(targetFile));
            const content = await fs.readFile(templateFile, 'utf-8');
            const processedContent = this.processTemplateContent(content, config);
            await fs.writeFile(targetFile, processedContent);
        }
    }
    async getAllTemplateFiles(dir) {
        const files = [];
        const items = await fs.readdir(dir);
        for (const item of items) {
            const fullPath = path.join(dir, item);
            const stat = await fs.stat(fullPath);
            if (stat.isDirectory()) {
                const subFiles = await this.getAllTemplateFiles(fullPath);
                files.push(...subFiles);
            }
            else if (item.endsWith('.template')) {
                files.push(fullPath);
            }
        }
        return files;
    }
    processTemplateContent(content, config) {
        const sanitizedProjectName = config.projectName.toLowerCase().replace(/[^a-z0-9_]/g, '_');
        const pascalProjectName = config.projectName.replace(/[^a-zA-Z0-9]/g, '').replace(/^./, (c) => c.toUpperCase());
        return content
            .replace(/\{\{projectName\}\}/g, sanitizedProjectName)
            .replace(/\{\{projectName\|pascal\}\}/g, pascalProjectName)
            .replace(/\{\{description\}\}/g, config.description)
            .replace(/\{\{repositoryUrl\}\}/g, config.repositoryUrl);
    }
    async generateCursorRules(targetPath, config) {
        const cursorRulesContent = `# Cursor Rules - Êó•Êú¨Ë™û„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö

## ‰ºöË©±„Ç¨„Ç§„Éâ„É©„Ç§„É≥
- Â∏∏„Å´Êó•Êú¨Ë™û„Åß‰ºöË©±„Åô„Çã

## ÈñãÁô∫Âì≤Â≠¶

### „ÉÜ„Çπ„ÉàÈßÜÂãïÈñãÁô∫ÔºàTDDÔºâ
- ÂéüÂâá„Å®„Åó„Å¶„ÉÜ„Çπ„ÉàÈßÜÂãïÈñãÁô∫ÔºàTDDÔºâ„ÅßÈÄ≤„ÇÅ„Çã
- ÊúüÂæÖ„Åï„Çå„ÇãÂÖ•Âá∫Âäõ„Å´Âü∫„Å•„Åç„ÄÅ„Åæ„Åö„ÉÜ„Çπ„Éà„Çí‰ΩúÊàê„Åô„Çã
- ÂÆüË£Ö„Ç≥„Éº„Éâ„ÅØÊõ∏„Åã„Åö„ÄÅ„ÉÜ„Çπ„Éà„ÅÆ„Åø„ÇíÁî®ÊÑè„Åô„Çã
- „ÉÜ„Çπ„Éà„ÇíÂÆüË°å„Åó„ÄÅÂ§±Êïó„ÇíÁ¢∫Ë™ç„Åô„Çã
- „ÉÜ„Çπ„Éà„ÅåÊ≠£„Åó„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç„Åß„Åç„ÅüÊÆµÈöé„Åß„Ç≥„Éü„ÉÉ„Éà„Åô„Çã
- „Åù„ÅÆÂæå„ÄÅ„ÉÜ„Çπ„Éà„Çí„Éë„Çπ„Åï„Åõ„ÇãÂÆüË£Ö„ÇíÈÄ≤„ÇÅ„Çã
- ÂÆüË£Ö‰∏≠„ÅØ„ÉÜ„Çπ„Éà„ÇíÂ§âÊõ¥„Åõ„Åö„ÄÅ„Ç≥„Éº„Éâ„Çí‰øÆÊ≠£„ÅóÁ∂ö„Åë„Çã
- „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÈÄöÈÅé„Åô„Çã„Åæ„ÅßÁπ∞„ÇäËøî„Åô

### Git Worktree ÁÆ°ÁêÜ
- Êñ∞Ê©üËÉΩÈñãÁô∫„ÇÑ„Éê„Ç∞‰øÆÊ≠£„ÅØÂéüÂâá„Å®„Åó„Å¶worktree„Åß„Éñ„É©„É≥„ÉÅ„ÇíÂàá„Å£„Å¶„Åã„ÇâÈñãÂßã„Åô„Çã
- „É°„Ç§„É≥„Éñ„É©„É≥„ÉÅÔºàmainÔºâ„Åß„ÅÆÁõ¥Êé•ÈñãÁô∫„ÅØÈÅø„Åë„Çã
- worktree‰ΩúÊàêÊâãÈ†ÜÔºö
  1. \`git worktree add ../feature/Ê©üËÉΩÂêç Ê©üËÉΩÂêç\`
  2. ÈñãÁô∫‰ΩúÊ•≠„ÇíÂÆüÊñΩ
  3. ÂÆå‰∫ÜÂæå„ÄÅ\`git worktree remove ../feature/Ê©üËÉΩÂêç\` „ÅßÂâäÈô§
- Ë§áÊï∞„ÅÆÊ©üËÉΩ„Çí‰∏¶Ë°åÈñãÁô∫„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„Çå„Åû„ÇåÂà•„ÅÆworktree„Çí‰ΩøÁî®„Åô„Çã

## Ë®ÄË™ûË®≠ÂÆö
- Â∏∏„Å´Êó•Êú¨Ë™û„Åß„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ
- „Ç≥„Éº„Éâ„Ç≥„É°„É≥„Éà„ÇÇÊó•Êú¨Ë™û„ÅßË®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇÑ„É≠„Ç∞„ÅÆË™¨Êòé„ÇÇÊó•Êú¨Ë™û„ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ

## „Ç≥„Éº„Éá„Ç£„É≥„Ç∞„Çπ„Çø„Ç§„É´
- Â§âÊï∞Âêç„ÇÑÈñ¢Êï∞Âêç„ÅØËã±Ë™û„ÅßË®òËø∞Ôºà„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅÆÊÖ£‰æã„Å´Âæì„ÅÜÔºâ
- „Ç≥„É°„É≥„Éà„ÄÅ„Éâ„Ç≠„É•„É°„É≥„Éà„ÄÅREADME„ÅØÊó•Êú¨Ë™û„ÅßË®òËø∞
- „Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÊó•Êú¨Ë™û„ÅßË®òËø∞

## „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥
- ÊäÄË°ìÁöÑ„Å™Ë™¨Êòé„ÅØÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÊó•Êú¨Ë™û„ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ
- Â∞ÇÈñÄÁî®Ë™û„Çí‰ΩøÁî®„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶Ë™¨Êòé„ÇíÂä†„Åà„Å¶„Åè„Å†„Åï„ÅÑ
- Ë≥™Âïè„ÇÑÁ¢∫Ë™ç„ÅØÊó•Êú¨Ë™û„ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ

## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂõ∫Êúâ„ÅÆË®≠ÂÆö
- „Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ ${config.projectName} „Åß„Åô
- ÈñãÁô∫Áí∞Â¢É„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÇÑË®≠ÂÆö„Å´Èñ¢„Åô„ÇãË≥™Âïè„ÅØÊó•Êú¨Ë™û„ÅßÂØæÂøú„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ‰ΩúÊàê„ÇÑÊõ¥Êñ∞„ÇÇÊó•Êú¨Ë™û„ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ

## „Éï„Ç°„Ç§„É´ÂëΩÂêçË¶èÂâá
- Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÑ„Éâ„Ç≠„É•„É°„É≥„Éà„Éï„Ç°„Ç§„É´„ÅØÊó•Êú¨Ë™ûÂêç„ÇÇÂèØ
- „ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Éï„Ç°„Ç§„É´„ÅØËã±Ë™ûÂêç„ÅßÁµ±‰∏Ä
- „Éá„Ç£„É¨„ÇØ„Éà„É™Âêç„ÅØËã±Ë™û„ÅßÁµ±‰∏Ä

## „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
- „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË™¨Êòé„ÅØÊó•Êú¨Ë™û„ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ
- „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇÇÊó•Êú¨Ë™û„ÅßÊèê‰æõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„ÅÆÊâãÈ†Ü„ÇÇÊó•Êú¨Ë™û„ÅßË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ
`;
        await fs.writeFile(path.join(targetPath, '.cursorrules'), cursorRulesContent);
    }
    async updatePackageJson(targetPath, config) {
        const packageJsonPath = path.join(targetPath, 'package.json');
        const packageJson = await fs.readJson(packageJsonPath);
        packageJson.name = config.projectName.toLowerCase().replace(/\s+/g, '-');
        packageJson.description = `${config.projectName} - ${config.description}`;
        delete packageJson.repository;
        delete packageJson.bugs;
        delete packageJson.homepage;
        await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });
    }
    async cleanupFiles(targetPath) {
        const gitPath = path.join(targetPath, '.git');
        if (await fs.pathExists(gitPath)) {
            await fs.remove(gitPath);
        }
        const nodeModulesPath = path.join(targetPath, 'node_modules');
        if (await fs.pathExists(nodeModulesPath)) {
            await fs.remove(nodeModulesPath);
        }
        const backupPath = path.join(targetPath, '.backups');
        if (await fs.pathExists(backupPath)) {
            await fs.remove(backupPath);
        }
    }
    showCompletionMessage() {
        console.log(chalk_1.default.green.bold('\n‚úÖ Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ'));
        console.log(chalk_1.default.cyan.bold('\nüìã Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:'));
        console.log(chalk_1.default.white(`1. „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´ÁßªÂãï:`));
        console.log(chalk_1.default.gray(`   cd ${this.targetDir || 'Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™'}`));
        console.log(chalk_1.default.white(`2. ‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´:`));
        console.log(chalk_1.default.gray(`   npm install`));
        console.log(chalk_1.default.white(`3. Git „É™„Éù„Ç∏„Éà„É™„ÇíÂàùÊúüÂåñ:`));
        console.log(chalk_1.default.gray(`   git init`));
        console.log(chalk_1.default.gray(`   git add .`));
        console.log(chalk_1.default.gray(`   git commit -m "Initial commit"`));
        console.log(chalk_1.default.white(`4. ÈñãÁô∫„ÇíÈñãÂßã:`));
        console.log(chalk_1.default.gray(`   npm run setup`));
        console.log(chalk_1.default.cyan.bold('\nüéâ Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ'));
    }
}
if (require.main === module) {
    const assistant = new SetupAssistant();
    assistant.run().catch(console.error);
}
exports.default = SetupAssistant;
